$date
	Thu Jul 07 21:46:37 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module BS_tb $end
$scope module BScircuit $end
$scope module RAMcircuit $end
$var reg 8 ! \ram[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module BS_tb $end
$scope module BScircuit $end
$scope module RAMcircuit $end
$var reg 8 " \ram[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module BS_tb $end
$scope module BScircuit $end
$scope module RAMcircuit $end
$var reg 8 # \ram[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module BS_tb $end
$scope module BScircuit $end
$scope module RAMcircuit $end
$var reg 8 $ \ram[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module BS_tb $end
$var wire 1 % finish $end
$var reg 1 & clk $end
$var reg 1 ' reset $end
$var reg 1 ( start $end
$scope module BScircuit $end
$var wire 2 ) RAM_read_addr_1 [1:0] $end
$var wire 2 * RAM_read_addr_2 [1:0] $end
$var wire 1 & clk $end
$var wire 1 ' reset $end
$var wire 1 ( start $end
$var wire 8 + ROM_read_data [7:0] $end
$var wire 2 , ROM_read_addr [1:0] $end
$var wire 8 - RAM_write_data [7:0] $end
$var wire 2 . RAM_write_addr [1:0] $end
$var wire 1 / RAM_we $end
$var wire 8 0 RAM_read_data_2 [7:0] $end
$var wire 8 1 RAM_read_data_1 [7:0] $end
$var parameter 32 2 ADDR_WIDTH $end
$var parameter 32 3 DATA_WIDTH $end
$var parameter 4 4 Done $end
$var parameter 4 5 Error $end
$var parameter 4 6 Idle $end
$var parameter 4 7 ROM2RAM $end
$var parameter 32 8 SIZE $end
$var reg 3 9 addr_next [2:0] $end
$var reg 3 : addr_reg [2:0] $end
$var reg 1 % finish $end
$var reg 4 ; state_next [3:0] $end
$var reg 4 < state_reg [3:0] $end
$scope module RAMcircuit $end
$var wire 1 & clk $end
$var wire 2 = read_addr_1 [1:0] $end
$var wire 2 > read_addr_2 [1:0] $end
$var wire 8 ? read_data_1 [7:0] $end
$var wire 8 @ read_data_2 [7:0] $end
$var wire 1 / we $end
$var wire 2 A write_addr [1:0] $end
$var wire 8 B write_data [7:0] $end
$var parameter 32 C ADDR_WIDTH $end
$var parameter 32 D DATA_WIDTH $end
$var integer 32 E idx [31:0] $end
$upscope $end
$scope module ROMcircuit $end
$var wire 2 F read_addr [1:0] $end
$var parameter 32 G ADDR_WIDTH $end
$var parameter 32 H DATA_WIDTH $end
$var reg 8 I read_data [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 H
b10 G
b1000 D
b10 C
b100 8
b1 7
b0 6
b11 5
b10 4
b1000 3
b10 2
$end
#0
$dumpvars
b11 I
b0 F
b100 E
b0 B
b0 A
bx @
bx ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
bx 1
bx 0
0/
b0 .
b0 -
b0 ,
b11 +
b0 *
b0 )
0(
1'
0&
0%
bx $
bx #
bx "
bx !
$end
#10000
1&
#20000
b1 ;
1(
0'
0&
#30000
1/
b1 9
b11 -
b11 B
b1 <
b1 ;
1&
#40000
0(
b1 9
0&
#50000
b10 -
b10 B
b10 +
b10 I
b1 .
b1 A
b1 ,
b1 F
b11 !
b11 1
b11 ?
b11 0
b11 @
b1 :
b10 9
1&
#60000
b10 9
0&
#70000
b1 -
b1 B
b1 +
b1 I
b10 .
b10 A
b10 ,
b10 F
b10 "
b10 :
b11 9
1&
#80000
b11 9
0&
#90000
b0 -
b0 B
b0 +
b0 I
b11 .
b11 A
b11 ,
b11 F
b1 #
b11 :
b100 9
1&
#100000
b100 9
0&
#110000
b11 -
b11 B
b11 +
b11 I
b0 .
b0 A
b0 ,
b0 F
b10 ;
b0 $
b100 :
b100 9
1&
#120000
b10 ;
0&
#130000
0/
1%
b0 -
b0 B
b11 !
b10 <
b0 ;
1&
#140000
1%
b0 ;
0&
#150000
b0 <
0%
b0 ;
1&
#160000
0&
#170000
1&
#180000
0&
#190000
1&
#200000
0&
#210000
1&
#220000
0&
#230000
1&
#240000
0&
#250000
1&
#260000
0&
#270000
1&
#280000
0&
#290000
1&
#300000
0&
#310000
1&
#320000
0&
#330000
1&
#340000
0&
#350000
1&
#360000
0&
#370000
1&
#380000
0&
#390000
1&
#400000
0&
#410000
1&
#420000
0&
#430000
1&
#440000
0&
#450000
1&
#460000
0&
#470000
1&
#480000
0&
#490000
1&
#500000
0&
#510000
1&
#520000
0&
#530000
1&
#540000
0&
#550000
1&
#560000
0&
#570000
1&
#580000
0&
#590000
1&
#600000
0&
#610000
1&
#620000
0&
#630000
1&
#640000
0&
#650000
1&
#660000
0&
#670000
1&
#680000
0&
#690000
1&
#700000
0&
#710000
1&
#720000
0&
#730000
1&
#740000
0&
#750000
1&
#760000
0&
#770000
1&
#780000
0&
#790000
1&
#800000
0&
#810000
1&
#820000
0&
#830000
1&
#840000
0&
#850000
1&
#860000
0&
#870000
1&
#880000
0&
#890000
1&
#900000
0&
#910000
1&
#920000
0&
#930000
1&
#940000
0&
#950000
1&
#960000
0&
#970000
1&
#980000
0&
#990000
1&
#1000000
0&
#1010000
1&
#1020000
0&
#1030000
1&
#1040000
0&
